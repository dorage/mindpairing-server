# Generated by Django 4.2.3 on 2023-07-23 13:19

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('hashtag', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MBTIQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveSmallIntegerField()),
                ('category', models.CharField(choices=[('energy', 'Energy'), ('information', 'Information'), ('decision', 'Decision'), ('lifestyle', 'Lifestyle')], max_length=20)),
                ('text', models.TextField()),
                ('select0_score', models.SmallIntegerField(verbose_name='Not at all')),
                ('select1_score', models.SmallIntegerField(verbose_name='No')),
                ('select2_score', models.SmallIntegerField(verbose_name='Yes')),
                ('select3_score', models.SmallIntegerField(verbose_name='Absolutely')),
            ],
            options={
                'db_table': 'mbti_question',
                'ordering': ('index',),
            },
        ),
        migrations.CreateModel(
            name='MBTITestThreshold',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('energy', models.PositiveSmallIntegerField()),
                ('information', models.PositiveSmallIntegerField()),
                ('decision', models.PositiveSmallIntegerField()),
                ('lifestyle', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'mbti_question_threshold',
            },
        ),
        migrations.CreateModel(
            name='MBTIClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mbti', models.CharField(choices=[('ESFJ', 'ESFJ'), ('ESTJ', 'ESTJ'), ('ESFP', 'ESFP'), ('ESTP', 'ESTP'), ('ISFJ', 'ISFJ'), ('ISTJ', 'ISTJ'), ('ISFP', 'ISFP'), ('ISTP', 'ISTP'), ('ENFJ', 'ENFJ'), ('ENTJ', 'ENTJ'), ('ENFP', 'ENFP'), ('ENTP', 'ENTP'), ('INFJ', 'INFJ'), ('INTJ', 'INTJ'), ('INFP', 'INFP'), ('INTP', 'INTP'), ('xxxx', 'xxxx')], max_length=4, validators=[django.core.validators.RegexValidator(message='Not match MBTI Characters', regex='[IEx][SNx][TFx][PJx]')])),
                ('title', models.CharField(blank=True, max_length=50)),
                ('summary', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('love', models.TextField(blank=True, null=True)),
                ('advice', models.TextField(blank=True, null=True)),
                ('match', models.CharField(blank=True, max_length=8, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('hashtags', models.ManyToManyField(to='hashtag.hashtag')),
            ],
            options={
                'db_table': 'mbti_class',
            },
        ),
    ]
